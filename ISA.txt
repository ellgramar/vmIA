16 bit computer with indirect jumps/branches and load/store
    but 32 bit byte addressable memory space 

r0-r15 are GPRs
r16   PC    Program Counter
r17   SP    Stack Pointer
r18   FP    Frame Pointer
r19   LR    Link Register
r20   AR    Accumulator Register (used in conjunction with TR, increments when activated)
r21   TR    Target Register (set this to counter target)
r22   SR    Status Register
               znct ixxx xxxx xxxx
               z  zero
               n  negetive
               c  carry/overflow
               t  signed carry/overflow
               i  interrupt flag
               x  reserved

First nibble opcodes
x0    Escape to n2 opcodes
x1    add
x2    sub
x3    mul
x4    div
x5    rem
x6    and 
x7    nnd 
x8    orr 
x9    nor 
xa    xor 
xb    xnr 
xc    ldi   Load immediate (-2048->2047 | 0->4095)
xd    lod   lod indirect
xe    str   str indirect
xf    jro   jump relative plus(/minus: -2048->2047) offset

lod and str load to/from the register specified in nibble 2 from/to the 
address specified in nibble 3 concatenated with nibble 4 in that order

Second Nibble opcodes
x00   Escape to n3 opcodes
x01   mov   move n4 to n3
x02   swp   swap n4 and n3
x03   lhi   load high immediate: first nibble of reg[n3] set to n4
x04   not   invert n4 and store in n3
x05   cmp   compare n3, n4: reg[n3] - reg[n4]
x06   cpi   compare immediates in n3 and n4 
x07   beq   branch if equal
x08   bne   branch if not equal
x09   bge   branch if greater than or equal to
x0a   bgt   branch if greater than 
x0b   ble   branch if less than or equal
x0c   blt   branch if less than
x0d   jmp   indirect jump
x0d
x0e
x0f

Jumps and Branches store the address in the last two nibbles 
which are concatenated together


x000  Escape to n4 commands
x001  inc   increment register
x002  dec   decrement register
x003  psh   mem[SP] = reg[n4], SP--
x004  pop   SP++, reg[n4] = mem[SP]
x005  trs   TR set to reg[n4]
x006  sle   left shift (mul 2)
x007  ssl   (signed shift left)
x008  sri   shift right (fill with zeros, int div 2)
x009  ssr   signed shift right
x00a  rol   rotate left
x00b  srl   signed rotate left
x00c  ror   rotate right
x00d  srr   signed rotate right 
x00e   
x00f  

x0000    ret   return from function (LR and FP)
x0001    nop   PC++
x0002    psha  push all registers to stack and decrement accordingly
x0003    popa  opposit of psha
x0004    ara   Accumulator Register Activate (start counting on every PC++)
x0005    clf   clear all flags
x0006    clz   clear z flag
x0007    cln   clear n flag
x0008    clc   clear c flag
x0009    clt   clear t flag
x000a
x000b
x000c
x000d
x000e
x000f    shutdown
