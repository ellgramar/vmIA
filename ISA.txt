16 bit computer with indirect jumps/branches and load/store
    but 31 bit addressable memory space (4 gig total memory limit for Macbook)

r0-r15 are GPRs
Special Registers (spr) are 16 bits each
r16   CR    count Register (used in conjunction with TR, increments when activated)
r17   TR    Target Register (set this to counter target)
r18   FR    Flag Register
               znct ispp pppp pppp
               z  zero
               n  negetive
               c  carry/overflow
               t  (RESERVED)signed carry/overflow
               i  interrupt flag
               s  screen flag, raised when input is detected. sort of an interrupt
               p  position flags to indicate position when s flag is raised
Address Registers (areg) are 32 bits each
r19   PC    Program Counter
r20   SP    Stack Pointer
r21   FP    Frame Pointer
r22   LR    Link Register


First nibble opcodes
x0    Escape to n2 opcodes
x1    add
x2    sub
x3    mul
x4    div
x5    rem
x6    and 
x7    nnd 
x8    orr 
x9    nor 
xa    xor 
xb    xnr 
xc    llb   load low byte of reg[n2] (0-255)
xd    lhb   load high byte of reg[n2]
xe    lod   load indirect / input if r3 > 0x7fff
xf    str   stor indirect / output (char)

lod and str load to/from the register specified in nibble 2 from/to the 
address specified in nibble 3 concatenated with nibble 4 in that order

The screen object is 25 rows and 80 cols giving 2000 positions
these are indexed from 0 to 1999 with positions 2000-2047 being alternate i/o.
If the first register (specified by n2) is greater than or equal to 0x8000,
then instead of store to memory, the value in reg[n2] is masked with 
0x7fff to remove the first bit, then that ascii equivalent character
is sent to the screen at the position specified in the lower two nibbles
of reg[n3] concatinated with reg[n4]. For lod, the value stored at the location 
specified by the lower two nibbles 


E.G. let R0 = 0x0041 (= A = 65 dec), R1 = 0x8000 and R2 = 0x0000; then:
the letter a is loaded into the top left corner or position 0.
instr:  lod r0, r3, r1;
machine code = 0xe 0x0 0x1 0x2 = 1110 0000 0001 0010



Second nibble opcodes
x00   Escape to n3 opcodes
x01   mov   move n4 to n3
x02   swp   swap n4 and n3
x03   not   invert n4 and store in n3
x04   cmp   compare n3, n4: reg[n3] - reg[n4]
x05   beq   branch if equal
x06   bne   branch if not equal
x07   bge   branch if greater than or equal to
x08   bgt   branch if greater than 
x09   ble   branch if less than or equal
x0a   blt   branch if less than
x0b   jmp   indirect jump to 2^31 locations
x0c   jrp   jump relative plus 1-256 offset
x0d   jrm   jump reletive minus 1-256 offset
x0e   sco   screen output
x0f   sci   screen input



Jumps and Branches store the address in the last two nibbles 
which are concatenated together. The address is checked for 
validity (address < 0x80000000) each time.

The screen object is 25 rows and 80 columns giving 2000 locations.
For store (str), the character to be written to is located in reg[n3]
while the location is specified by the lower 12 bits in reg[n4]. For 
load (lod), the location stored in the lower 12 bits of reg[n4] is 
stored in reg[n3]


x000  Escape to n4 commands
x001  inc   increment register
x002  dec   decrement register
x003  psh   mem[SP] = reg[n4], SP--
x004  pop   SP++, reg[n4] = mem[SP]
x005  trs   TR set to reg[n4]
x006  sle   left shift (mul 2)
x007  ssl   (signed shift left)
x008  sri   shift right (fill with zeros, int div 2)
x009  ssr   signed shift right
x00a  rol   rotate left
x00b  srl   signed rotate left
x00c  ror   rotate right
x00d  srr   signed rotate right 
x00e   
x00f  

x0000    ret   return from function (LR and FP)
x0001    nop   PC++
x0002    psha  push all registers to stack and decrement accordingly
x0003    popa  opposit of psha
x0004    ara   Accumulator Register Activate (start counting on every PC++)
x0005    clf   clear all flags
x0006    clz   clear z flag
x0007    cln   clear n flag
x0008    clc   clear c flag
x0009    clt   clear t flag
x000a    cls   clear s flag
x000b
x000c
x000d
x000e
x000f    shutdown
